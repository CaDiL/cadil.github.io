<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | CaDiL's blog]]></title>
  <link href="http://cadil.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://cadil.github.io/"/>
  <updated>2016-04-12T21:19:25+09:00</updated>
  <id>http://cadil.github.io/</id>
  <author>
    <name><![CDATA[CaDiL]]></name>
    <email><![CDATA[kkhoschuluu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello, Rails! үргэлжлэл]]></title>
    <link href="http://cadil.github.io/blog/2016/01/13/hello-rails-2/"/>
    <updated>2016-01-13T23:12:01+08:00</updated>
    <id>http://cadil.github.io/blog/2016/01/13/hello-rails-2</id>
    <content type="html"><![CDATA[<h1>Цаг нэмэх</h1>

<p>Ерѳнхийдѳѳ applcation - оо Dynamic болгох ганц хоёр алхамтай танилцлаа.. Дараагийн алхам бол одоо харагдаж байгаа цаг нь хаанаас дамжин харагдаж байгааг тогтоон address хийж ѳгѳх юм.</p>

<p>Ruby-гын <code>Time.now()</code> method нь embed хийж hello.html.erb загварт дуудан ѳгч ажиллаж байна. Хэрэглэгч, хандагч, уг page руу хандах бүр хэдэн цаг болж байгааг яг таг харуулж байна. Жижиг хэмжээний ѳѳрчлѳлт оруулж үзэцгээе. Одоо харагдаж байгаа view хэсгийг энэ чигт нь үлдээж controller хэсэгт цагийг байрлуулах шаардлагатай гэж үзээд Controller хэсэгт action method - ыг <code>@time</code> гэсэн хувьсагчид орлуулна. </p>

<pre><code class="ruby demo/app/controllers/say_controller.rb">class SayController &lt; ApplicationController
  def hello
    @time = Time.now
  end

  def goodbye
  end
end
</code></pre>

<p>.html.erb - загвар дотор, controller хэсэгт оруулж ѳгсѳн хувьсагчаа орлуулж бичнэ.</p>

<p>```html demo/app/views/say/hello.html.erb</p>

<h1>Hello from Rails!</h1>


<p><p>
  It is now &lt;%= @time %>
</p>
```</p>

<p>Browser - ѳѳ refresh хийгээд харвал controller дээр нэмсэн хувьсагч маань views хэсэгт буюу энэ хоёрын хооронд утга дамжин амжилттайгаар дэлгэцэд хэвлэн харуулж байна. </p>

<p>Яагаад заавал controller - оос харуулж байгаа зүйлийг views - дээр зарлан, хоёр гурван юм нэмж хийж, ажил удаад байгаа юм гэж гайхаж магадгүй. Уг Application - дотор бол ингэж хийсэн хийгээгүй нээх ѳѳрчлѳлт гарахгүй. Гэхдээ логикоор харвал ингэж хийх нь бидэнд ашигтай юм. Жишээ нь: 
Application - оо цаашид хѳгжүүлж олон орны хэрэглэгч хандалт хийх боломжтой болгоё гэж тѳсѳѳлье. Үүн дээр үндэслэхэд, тухайн орны цагын бүсээс хамааран дэлгэцэнд хэдэн цаг болж байгааг харуулах нь чухал. Ингэж харуулахад хангалттай хэмжээний код нэмж бичих хэрэг болно. Харин энэ их хэмжээний код нь views - д тийм тохиромжтой шийдэл болж чадахгүй л болох уу! Харин controller - т цагийг харуулахаар шийдэж ѳгснѳѳр уг application - ыг илүү уян хатан боглож ѳгч байгаа ба controller хэсгээс ѳѳрчлѳсѳн цагын бүс нь views хэсэгт мѳн time object - ыг update хийгээд байх шаардлага байхгүй гэсэн үг юм. Цагыг Data гэж үз, тэгвэл заавал view болон controller - тэй холбогдсон байх шаардлагтай. Цаашид Model гэж судлаад ирэхээр бид энэ тухай илүү ихийг сурах болно.</p>

<h1>Дүгнээд нэг харвал</h1>

<ul>
<li>Хэрэглэгч уг application-нд хандалтыг local-оос <a href="http://localhost:3000/say/hello">http://localhost:3000/say/hello</a> - URL хаягаар хандан орсон..</li>
<li>Rails - routes - ыг тааруулж ѳгсѳн. 2 хэсэгт хуваан авч үзвэл, <code>say</code> хэсэг нь controller хэсгийг авч, ингэснээр Rails нь шинээр Ruby-гын SayController хэсгийг дуурайлган буюу удамшуулан үүсгэх боломжтой болсон. (app/controllers/say_controller.rb - гэх дарааллаар олж болно)</li>
<li>Дараагийн хэсэгт нь <code>hello</code> - ыг action - гэдгийг тодорхойлсон. Rails нь тухайн нэрийн дагуу controller - оос method - ыг дуудсан. Энэхүү action method нь time object - ыг үүсгэж, <code>@time</code> гэсэн хувьсагч болгосон.</li>
<li>Rails нь загвар ашиглан үр дүнг дэлгэцэд хэвлэдэг болсон. App/view directory -> subdirectory нь controller-ын (say) - тэй адил нэрээр, тэрхүү subdirectory дотор hello.html.erb.</li>
<li>Rails нь уг файлыг <code>ERB templating system</code> - руу боловсруулан, controller хэсэгт утгыг (value) заан Ruby - д оруулж (embed) ѳгсѳн.</li>
<li>Үр дүнг browser дээрээс харахад, Rails хүсэлтүүдийг боловсруулан, ажиллаж байсан.</li>
</ul>


<h1>Pages - үүдыг холбох</h1>

<p>Нэг хуудастай Web Application гэж ч бас хаана байхав. Энэ удаа бид applicaiton - доо энгийн веб загвар хийж үзэцгээе.</p>

<p>2 action - доо нэг controller ашиглана. Яагаад гэвэл бидэнд одоо шинээр controller - үүсгээд байх шаардлага гараагүй болохоор.</p>

<p>Goodbye action - г controller - т define хийгээд ѳгчихсѳн болохоор одоо app/views/say дотор шинэ template үүсгэж ѳгѳх юм. Goodbye.html.erb гэж байгаа учир нь action нь default template загвар авах үедээ action - ын нэртэй холбогдож байдаг болохоор гэж ойлгож болно. </p>

<pre><code class="html demo/app/views/say/goodbye.html.erb">&lt;h1&gt;Goodbye!&lt;/h1&gt;
&lt;p&gt; 
    Энд байх сайхан байна.
&lt;/p&gt; 
</code></pre>

<p>Browser - рүүгээ ороод энэ удаа URL хаягаа ѳѳрчлѳѳд хандалт хийнэ. <a href="http://localhost:3000/say/goodbye">http://localhost:3000/say/goodbye</a></p>

<p>Харин одоо хоёр page - ээ хооронд нь холболт хийх хэрэгтэй. Hello page - ыг Goodbye page - тэй холбоно. Цаашид application хийхдээ хоорондын холболтыг button ашиглаж хийнэ, энэ удаа зүгээр hyperlink - ашиглаад хийчихье.</p>

<p>hello.html.erb - иймэрхүү байдлаар:
<code>erb
&lt;p&gt; 
    Say &lt;a href="http://cadil.github.io/say/goodbye"&gt;Goodbye&lt;/a&gt;!
&lt;/p&gt;
</code></p>

<p>Харин goodbye.html.erb:
<code>erb
&lt;p&gt; 
    Say &lt;a href="http://cadil.github.io/say/hello"&gt;Hello&lt;/a&gt;!
&lt;/p&gt;
</code>
Дээрx аргаар бичиж болно, асуудалгүй ажиллана. Нѳгѳѳ талаас жаахан эмзэг л болох юм даа. Уг Application - ынхаа web server - ыг ѳѳрчлѳѳд үзьѳ гэж бодоход URL - ууд шууд танихаа болино. 
Тийм болохоор, бид иймэрхүү эрсдэл хүлээх хэрэг байхгүй. Rails цаанаасаа маш олон helper, methods байдаг болохоор ур аргуудыг views, template - д ашиглаж болно. Жишээл нь:
<code>link_to()</code> - энэ method нь action - нд hyperlink үүсгэж ѳгдѳг жишээтэй. Басаж болохгүй, энэ method - ын хийж чадах зүйл их шүү. 
hello.html.erb - дээ <code>link_to()</code> - ашиглаад үзье:</p>

<pre><code class="erb demo/app/views/say/hello.html.erb">&lt;h1&gt;Hello from Rails!&lt;/h1&gt;
&lt;p&gt;
    It is now &lt;%= @time %&gt;
&lt;/p&gt;
&lt;p&gt;
    Time to say
    &lt;%= link_to "Goodbye", say_goodbye_path %&gt;!
&lt;/p&gt;
</code></pre>

<p>Түр зогсоод энэ мѳрийг сайн харьцгаая:
<code>ruby
&lt;%= link_to "Goodbye", say_goodbye_path %&gt;
</code></p>

<p><code>Link_to</code> - оор дуудах үйлдэл хийгдэж байна. (Rails-д method-ыг templates, helpers- ыг бичихид илүү хялбар болгож ѳгсѳн)
<code>say_goodbye_path</code> нь зам гээд ойлгоход болно доо.</p>

<p>Goodbye.html.erb - мѳн адил аргаар:
<code>erb demo/app/views/say/goodbye.html.erb
&lt;h1&gt;Goodbye!&lt;/h1&gt;
&lt;p&gt;
    It was nice having you here.
&lt;/p&gt;
&lt;p&gt;
    Say &lt;%= link_to "Hello", say_hello_path %&gt; again.
&lt;/p&gt;
</code>
За энэ хүрээд энгийн туршилтын application маань дуусаж байна. Дараагийн хичээлээр бид жинхэнэ application хийхэд суралцах болно. </p>

<h1>Бид юу хийсэн бэ?</h1>

<ul>
<li>Rails application хэрхэн шинээр үүсгэх, үүсгэсэн application - доо controller шинээр үүсгэж сурлаа.</li>
<li>Хэрхэн Dynamic контентыг controller дээр үүсгэх, үүсгэсэн контентоо view - ыг ашиглан харуулахад суралцсан.</li>
<li>Хэрхэн page хооронд холбох талаар үзлээ.</li>
</ul>


<p>Чамлахаар чанга атга, дээр үзсэн бүхэн дараагийн хичээлийн эхлэл юм шүү. Амжилт!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Шинээр апплейкшн үүсгэх]]></title>
    <link href="http://cadil.github.io/blog/2016/01/04/shineer-applieikshn-uusghekh/"/>
    <updated>2016-01-04T20:56:26+08:00</updated>
    <id>http://cadil.github.io/blog/2016/01/04/shineer-applieikshn-uusghekh</id>
    <content type="html"><![CDATA[<p>Шинээр райлс апплейкшн create хийхийн ѳмнѳ бид эхлэл хэсгээсээ эхлээд зохион байгуулал, эмх цэгцтэй байх хэрэгтэй. <strong>Work</strong> гэсэн нэртэй <strong> шинэ directory </strong> үүсгэнэ. Энэ <strong> work </strong> гэсэн directory дотор тѳслүүдээ шинээр үүсгээд явбал эмх цэгцтэй, амар юм. Work - дотор demo гэсэн райлс аппклейкшн үүсгэцгээе.</p>

<pre><code>rubys&gt; mkdir work
rubys&gt; cd work
work&gt; rails new demo
create
create README.rdoc
create Rakefile
create config.ru
    :   :   :   :
create vendor/assets/stylesheets
create vendor/assets/stylesheets/.keep
   run bundle install
Fetching gem metadata from https://rubygems.rog/.......
    :   :   :   :
Your bundle is complete!
Use 'bundle show [gemname]' to see where a bundled gem is installed
work&gt;
</code></pre>

<p>Дээр бичигдсэн <strong> rails new demo</strong> коммандаар бид <strong>demo</strong> нэртэй <strong> directory</strong> үүсгэлээ. Терминал доошоогоо subdirectory болон олон шинэ файлуудыг автомотаар default - аар үүсгэж ѳгѳв.</p>

<pre><code>work&gt; cd demo
demo&gt; ls -p
app/  config/  db/  Gemfile.lock log/  Rakefile  test/   vendor/
bin/  config.ru  Gemfile lib/    public/  README.rdoc  tmp/
</code></pre>

<p>Гэх мэтээр directory - ууд үүсгэх ба энэхүү chapter - т бид эдгээрийг ашиглах шаардлага одооогоор гарахгүй ба зѳвхѳн app/ directory-д ѳѳрсдийн кодоо бичих нэмж оруулах юм.</p>

<p>Доорх коммандаар дэлгэрэнгүй мэдээлэл авах боломжтой:</p>

<pre><code>demo&gt; rake about
</code></pre>

<p>Мѳн дээрх кодоор алдаа хайж болдог ба жишээ нь JavaScript runtime  - олдохгүй байгаа бол алдааны мэдээлэл гаргаж боломжит линкүүдээс татаж авах хүсэлт ирүүлнэ.</p>

<p><strong>rake about</strong> - аар алдаа илэрээгүй бол цааш үргэлжүүлцгээе. Одоо юу хийх хэрэгтэй вэ гэхээр Stand-alone Web server - ыг асаахад л болно. Ингэж server асааж байж л бид шинээр үүсгэсэн райлс аппклейншаа ажиллуулах юм.</p>

<pre><code>demo&gt; rails server
=&gt; Booting WEBrick
=&gt; Rails 4.0.0 application starting in development on http://0.0.0.0:30000
=&gt; Run 'rails server -h' for more startup options
=&gt; Ctrl+C to shutdown server
[2013-04-18 20:22:16] INFO WEBrick 1.3.1
[2013-04-18 20:22:16] INFO ruby 2.0.0 (2013-02-24) [x86_64-linux] 
[2013-04-18 20:22:16] INFO WEBrick::HTTPServer#start: pid=25170 port=3000
</code></pre>

<p>Web Server нь ямар server суулгасан эсэхээс шалтгаалан ажиллах ба Ruby-гийн хувьд <strong>WEBrick server</strong> нь ruby-гийн цѳм нь болж ѳгсѳн нэг үгээр бол ruby-г илтгэж чадахаар нэгэн бүхэл хэсэг нь болсон сервер юм. Гэхдээ яах уу, ѳѳрийн дурын веб серверыг суулган Ruby on Rails тай хослуулан ажиллуулж болно. </p>

<p>Доорк коммандыг ашиглан WEBrick-ыг хүчлэн (force) ажиллуулж болно.</p>

<pre><code>demo&gt; rails server webtrick
</code></pre>

<p>Сервер асаасан код боксын хамгийн сүүлийн мѳрийг харвал server нь port:3000 дээр ассан байна. 0.0.0.0 гэсэн холболтыг авч үзвэл WEBrick нь тухайн address-д connection - д бүхэл талын зѳвшѳѳрлыг олгож байна гэж ойлгож болно. Ойлгогдохоор хэлбэл дурын browser дээр **<a href="http://localhost:3000**">http://localhost:3000**</a> address - аар хандан сервер рүү холбогдох юм.</p>

<p>Сервер ээ асаагаад localhost-oos харж болж байна. Терминал дээр сервер дээр болж байгаа үйл явцыг <code>tracking</code> - хийх боломжтой юм.</p>

<p><code>Ctrl + C</code> - командыг ашиглан WEBrick-ыг унтраана. Гэхдээ одоохондоо битгий унтраагаарай бид цааш үргэлжлүүлэн явах болхлоор…</p>

<p>Апплкейшнаа үүсгээд сервер ээ асаачихлаа, харин ерѳѳсѳѳ код бичсэнгүй ээ, тийм ээ? Дараагийн хэсгээс код уруу орцгооё!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Райлс болон Ѳгѳгдлийн сан]]></title>
    <link href="http://cadil.github.io/blog/2016/01/04/rails-bolon-fghfghdliin-san/"/>
    <updated>2016-01-04T19:59:34+08:00</updated>
    <id>http://cadil.github.io/blog/2016/01/04/rails-bolon-fghfghdliin-san</id>
    <content type="html"><![CDATA[<p>Райлс апплкейшнг ѳѳр database - тэй холбох гэж байгаа бол DB2, MySQL, Oracle, Postgres, Firefird болон SQL Server гэх мэтээр сонголтууд бий. SQLite 3 - ыг Райлс апплкейшнтэй холбож ашиглахын ѳмнѳ database driver суулгаж Library нь Райлсын database engine-тэй холбож ѳгѳх хэрэгтэй.</p>

<!-- more -->


<blockquote><p>Ѳѳрийн хувийн Rails API Documentation үүсгэх</p>

<p>Local орчинд ѳѳрийн Rails API Documentation үүсгэх боломжтой юм.  Маш энгийн, доорх командыг ѳѳрийн терминал дээр бичихэд л хангалттай.</p></blockquote>

<pre><code>rails_apps&gt; rails new dummy_app
rails_apps&gt; cd dumny_app
dumny_app&gt; rake doc:rails
</code></pre>

<blockquote><p>Хамгийн сүүлд бичсэн мѳр бага зэрэг хугацаа авна. Уншиж дуусмагц, Rails API Documentation нь doc/api гэсэн directory tree үүснэ. Нэг зѳвѳлгѳѳ хэлэхэд уг directory-г ѳѳрийн desktop уруу хуулаад dumnуapp tree -г устгах нь зүйтэй. </p>

<p>Rails API Documentation - хандах бол browser дээрээс doc/apo/index.html хаягаар орох боломжтой. </p></blockquote>

<p>Доорх лкнкүүдыг бид бүхэн ашиглах боломжтой ба дэлгэрэнгүй мэдээллийг тухайн цахим хаягаар орон шалгана уу:</p>

<ul>
<li>DB 2: <a href="http://raa.ruby-lang.org/project/ruby-db2">http://raa.ruby-lang.org/project/ruby-db2</a> эсвэл <a href="http://rubyforge.org/projects/rubyibm">http://rubyforge.org/projects/rubyibm</a></li>
<li>Firebird: <a href="http://rubyforge.org/projects/fireruby/">http://rubyforge.org/projects/fireruby/</a></li>
<li>MySQL: <a href="http://www.tmtm.org/en/mysql/ruby/">http://www.tmtm.org/en/mysql/ruby/</a></li>
<li>Oracle: <a href="http://rubyforge.org/projects/ruby-oci8">http://rubyforge.org/projects/ruby-oci8</a></li>
<li>Postgres: <a href="https://bitbucket.org/ged/ruby-pg/wiki/Home">https://bitbucket.org/ged/ruby-pg/wiki/Home</a></li>
<li>SQL Server: <a href="https://github.com/rails-sqlserver">https://github.com/rails-sqlserver</a></li>
<li>SQLLite: <a href="https://github.com/luislavena/sqlite3-ruby">https://github.com/luislavena/sqlite3-ruby</a></li>
</ul>


<p>Xэрхэн ѳгѳдлийн сан сонгож, тохиргоо хийх вэ?</p>

<p>Райлсын default database нь sqllite3. Sqllite3 нь ашиглахад тохиромжгүй гэж үзэж байгаа бол арай саруул database болох MySQL, PostgreSQL - нарыг ашиглах нь оновчтой шийдэл болно.</p>

<p>Дээрх хоёр нь мэдээлэл, аргачлалын хувьд олдоц ихтэй тул ашиглахад хялбар болов уу.</p>
]]></content>
  </entry>
  
</feed>
